import io
import matplotlib.pyplot as plt
from tabulate import tabulate
from aiogram import types
from aiogram.types import InputFile
import json
import os
from config import FONT_PATH
from data_loader import (
    get_player_averages, get_player_stats, get_maps, get_map_stats,
    get_tournaments, get_match_by_index, get_best_map_for_player,
    get_last_match_for_player, get_players, get_match_list
)
from keyboards import main_menu, export_format_keyboard, players_chart_keyboard
from export_utils import export_data, HISTORY_PATH


def render_player_card(name, stats, with_keyboard=True):
    """–£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞"""
    if not stats:
        return '‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.', None
    
    ratings = [float(s['Rating']) for s in stats]
    adrs = [float(s['ADR']) for s in stats]
    kasts = [float(s['KAST'].replace('%', '')) for s in stats if isinstance(s['KAST'], str)]
    avg_rating = sum(ratings) / len(ratings)
    avg_adr = sum(adrs) / len(adrs)
    avg_kast = sum(kasts) / len(kasts) if kasts else 0
    best_map = get_best_map_for_player(name)
    last_match = get_last_match_for_player(name)

    # –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    table_data = [{
        "–†–µ–π—Ç–∏–Ω–≥": f"{avg_rating:.2f}",
        "KAST": f"{avg_kast:.1f}%",
        "ADR": f"{avg_adr:.0f}",
        "K/D": f"{sum([float(s['K']) for s in stats]) / len(stats):.2f}/{sum([float(s['D']) for s in stats]) / len(stats):.2f}"
    }]
    table = tabulate(table_data, headers="keys", tablefmt="fancy_grid")

    text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞: {name}</b>\n"
        f"üèÜ <b>–ö–æ–º–∞–Ω–¥–∞: BakS eSports</b>\n\n"
        f"üìä <b>–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ –≤—Å–µ–º –º–∞—Ç—á–∞–º:</b>\n"
        f"<pre>{table}</pre>\n"
    )

    if best_map:
        text += f"üéØ <b>–õ—É—á—à–∞—è –∫–∞—Ä—Ç–∞:</b> <code>{best_map[0]}</code> (—Ä–µ–π—Ç–∏–Ω–≥ <code>{best_map[1]:.2f}</code>)\n"

    if last_match:
        for p in last_match['overall']['players']['both']:
            if p['nickname'].lower() == name.lower():
                opponent = [t for t in last_match['teams'] if t != 'BAKS'][0]
                text += f"üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á:</b> vs <code>{opponent}</code>\n"
                text += f"‚öîÔ∏è K/D: <code>{p['K']}K/{p['D']}D</code> | ‚≠ê –†–µ–π—Ç–∏–Ω–≥: <code>{p['Rating']}</code> | üí• ADR: <code>{p['ADR']}</code>\n"
                break

    text += f"\nüéÆ <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>"

    keyboard = None
    if with_keyboard:
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(row_width=2)
        for idx, s in enumerate(stats):
            date = s['date']
            opponent = s.get('opponent', '-')
            button_text = f"{date} vs {opponent}"
            callback_data = f"player_match_{name}_{idx}"
            keyboard.insert(InlineKeyboardButton(text=button_text, callback_data=callback_data))
        keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∏–≥—Ä–æ–∫–æ–≤", callback_data="back_players"))
        keyboard.add(InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data=f"export_table_player_{name}"))
    return text, keyboard


async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    text = (
        'üéÆ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç <u>BakS eSports</u>!</b>\n\n'
        'üìä –Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥—ã –∏ –∏–≥—Ä–æ–∫–æ–≤ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n\n'
        'üöÄ <b>–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:</b>\n'
        '‚Ä¢ üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –∏ –º–∞—Ç—á–µ–π\n'
        '‚Ä¢ üó∫Ô∏è –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ä—Ç–∞–º –∏ —Ç—É—Ä–Ω–∏—Ä–∞–º\n'
        '‚Ä¢ üìä –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –ª—é–±—ã–º –º–µ—Ç—Ä–∏–∫–∞–º\n'
        '‚Ä¢ üèÜ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–æ–º–∞–Ω–¥—ã\n'
        '‚Ä¢ üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV, JSON, Excel, PDF ‚Äî –ø—Ä—è–º–æ –∏–∑ –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–±–ª–∏—Ü–µ–π!\n'
        '‚Ä¢ üïì –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π (–ø—Ä–æ—Å–º–æ—Ç—Ä—ã, —ç–∫—Å–ø–æ—Ä—Ç—ã) ‚Äî –∫–Ω–æ–ø–∫–∞ <b>üïì –ò—Å—Ç–æ—Ä–∏—è</b> –≤ –º–µ–Ω—é\n'
        '‚Ä¢ ‚ÑπÔ∏è –ü–æ—è—Å–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∏–≥—Ä–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤\n\n'
        'üí° <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n'
        '‚Ä¢ –ù–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n'
        '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/help</code> –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π\n'
        '‚Ä¢ –í —Å–ø–∏—Å–∫–∞—Ö –¥–æ—Å—Ç—É–ø–Ω—ã –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞\n'
        '‚Ä¢ –ö–Ω–æ–ø–∫–∞ <b>üì§ –≠–∫—Å–ø–æ—Ä—Ç</b> ‚Äî –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª—ã (CSV, JSON, Excel, PDF)\n'
        '‚Ä¢ –ö–Ω–æ–ø–∫–∞ <b>üïì –ò—Å—Ç–æ—Ä–∏—è</b> ‚Äî –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π\n\n'
        'üéØ <b>–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑?</b> –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ!'
    )
    await message.answer(text, reply_markup=main_menu())


async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        'üìö <b>–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∏ —Ñ—É–Ω–∫—Ü–∏—è–º</b>\n\n'
        'üéÆ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n'
        '‚Ä¢ <code>/start</code> ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n'
        '‚Ä¢ <code>/players</code> ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã\n'
        '‚Ä¢ <code>/player [–Ω–∏–∫]</code> ‚Äî –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞\n'
        '‚Ä¢ <code>/maps</code> ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–∞–º\n'
        '‚Ä¢ <code>/tournaments</code> ‚Äî –º–∞—Ç—á–∏ –∏ —Ç—É—Ä–Ω–∏—Ä—ã\n'
        '‚Ä¢ <code>/progress</code> ‚Äî –¥–∏–Ω–∞–º–∏–∫–∞ —Ä–∞–∑–≤–∏—Ç–∏—è –∏–≥—Ä–æ–∫–æ–≤\n'
        '‚Ä¢ <code>/history</code> ‚Äî <b>–∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π (–ø—Ä–æ—Å–º–æ—Ç—Ä—ã, —ç–∫—Å–ø–æ—Ä—Ç—ã)</b>\n\n'
        'üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –≥—Ä–∞—Ñ–∏–∫–∏:</b>\n'
        '‚Ä¢ <code>/graph [–Ω–∏–∫] [–º–µ—Ç—Ä–∏–∫–∞]</code> ‚Äî –≥—Ä–∞—Ñ–∏–∫ –ø–æ –º–µ—Ç—Ä–∏–∫–µ –∏–≥—Ä–æ–∫–∞\n'
        '‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏: Rating, ADR, KAST, K/D, HS%\n\n'
        'üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö:</b>\n'
        '‚Ä¢ –í –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å —Ç–∞–±–ª–∏—Ü–µ–π –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ <b>üì§ –≠–∫—Å–ø–æ—Ä—Ç</b>\n'
        '‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: CSV, JSON, Excel, PDF\n'
        '‚Ä¢ –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏ —Å–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª!\n\n'
        'üïì <b>–ò—Å—Ç–æ—Ä–∏—è:</b>\n'
        '‚Ä¢ –ö–Ω–æ–ø–∫–∞ <b>üïì –ò—Å—Ç–æ—Ä–∏—è</b> –≤ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ <code>/history</code> ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–µ–π—Å—Ç–≤–∏–π\n\n'
        'üñ±Ô∏è <b>–ù–∞–≤–∏–≥–∞—Ü–∏—è:</b>\n'
        '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n'
        '‚Ä¢ –í —Å–ø–∏—Å–∫–∞—Ö –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π\n'
        '‚Ä¢ –í –∫–∞—Ä—Ç–æ—á–∫–µ –∏–≥—Ä–æ–∫–∞ ‚Äî –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –≤—Å–µ–º –º–µ—Ç—Ä–∏–∫–∞–º\n'
        '‚Ä¢ –ö–Ω–æ–ø–∫–∞ <b>üì§ –≠–∫—Å–ø–æ—Ä—Ç</b> ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ CSV, JSON, Excel, PDF\n\n'
        '‚ùì <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>\n'
        '‚Ä¢ –ö–Ω–æ–ø–∫–∞ <b>‚ÑπÔ∏è –ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã</b> ‚Äî –ø–æ—è—Å–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤\n'
        '‚Ä¢ –ö–Ω–æ–ø–∫–∞ <b>‚ùì –ü–æ–º–æ—â—å</b> ‚Äî —ç—Ç–æ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫\n'
        '‚Ä¢ <code>/feedback</code> ‚Äî –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –∑–∞–º–µ—á–∞–Ω–∏—è\n\n'
        'üéØ <b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>\n'
        '‚Ä¢ <code>/player Due1yant</code> ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ Due1yant\n'
        '‚Ä¢ <code>/graph Due1yant ADR</code> ‚Äî –≥—Ä–∞—Ñ–∏–∫ ADR –∏–≥—Ä–æ–∫–∞ Due1yant\n'
        '‚Ä¢ <code>/map Mirage</code> ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ Mirage'
    )
    await message.answer(help_text, reply_markup=main_menu())


async def cmd_abbr(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /abbr"""
    abbr_text = (
        'üìö <b>–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∏–≥—Ä–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä</b>\n\n'
        'üéØ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:</b>\n'
        '‚Ä¢ <b>K/D</b> ‚Äî Kill/Death Ratio (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —É–±–∏–π—Å—Ç–≤ –∫ —Å–º–µ—Ä—Ç—è–º)\n'
        '‚Ä¢ <b>ADR</b> ‚Äî Average Damage per Round (—Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–Ω –∑–∞ —Ä–∞—É–Ω–¥)\n'
        '‚Ä¢ <b>KAST</b> ‚Äî Kills, Assists, Survived, Traded (% —Ä–∞—É–Ω–¥–æ–≤ —Å –≤–∫–ª–∞–¥–æ–º)\n'
        '‚Ä¢ <b>Rating</b> ‚Äî –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞\n'
        '‚Ä¢ <b>HS</b> ‚Äî Headshot (–ø—Ä–æ—Ü–µ–Ω—Ç —É–±–∏–π—Å—Ç–≤ –≤ –≥–æ–ª–æ–≤—É)\n\n'
        '‚öîÔ∏è <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:</b>\n'
        '‚Ä¢ <b>OpK-D</b> ‚Äî Opening Kill-Death (–ø–µ—Ä–≤—ã–µ —É–±–∏–π—Å—Ç–≤–∞/—Å–º–µ—Ä—Ç–∏)\n'
        '‚Ä¢ <b>MKs</b> ‚Äî Multi-Kills (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É–±–∏–π—Å—Ç–≤–∞ –∑–∞ —Ä–∞—É–Ω–¥)\n'
        '‚Ä¢ <b>1vsX</b> ‚Äî –∫–ª–∞—Ç—á–∏ (–ø–æ–±–µ–¥—ã –≤ –Ω–µ—Ä–∞–≤–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö)\n'
        '‚Ä¢ <b>A</b> ‚Äî Assists (–ø–æ–º–æ—â—å –≤ —É–±–∏–π—Å—Ç–≤–∞—Ö)\n'
        '‚Ä¢ <b>A_f</b> ‚Äî Flash Assists (–ø–æ–º–æ—â—å —á–µ—Ä–µ–∑ –æ—Å–ª–µ–ø–ª–µ–Ω–∏–µ)\n'
        '‚Ä¢ <b>D_t</b> ‚Äî Death Time (–≤—Ä–µ–º—è –¥–æ —Å–º–µ—Ä—Ç–∏)\n\n'
        'üó∫Ô∏è <b>–ö–∞—Ä—Ç—ã –∏ —Å—Ç–æ—Ä–æ–Ω—ã:</b>\n'
        '‚Ä¢ <b>T</b> ‚Äî Terrorist (—Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç—ã)\n'
        '‚Ä¢ <b>CT</b> ‚Äî Counter-Terrorist (–∫–æ–Ω—Ç—Ä-—Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç—ã)\n'
        '‚Ä¢ <b>MVP</b> ‚Äî Most Valuable Player (—Å–∞–º—ã–π —Ü–µ–Ω–Ω—ã–π –∏–≥—Ä–æ–∫)\n\n'
        'üí° <b>–°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ —Ç–µ—Ä–º–∏–Ω—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!'
    )
    await message.answer(abbr_text, reply_markup=main_menu())


async def cmd_players(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /players"""
    players_avg = get_player_averages()

    sorted_players = sorted(players_avg.items(), key=lambda x: x[1]['Rating'], reverse=True)

    table_data = []
    for i, (nickname, stats) in enumerate(sorted_players, 1):
        table_data.append({
            "–ú–µ—Å—Ç–æ": f"{i}",
            "–ò–≥—Ä–æ–∫": nickname,
            "–†–µ–π—Ç–∏–Ω–≥": f"{stats['Rating']:.2f}",
            "ADR": f"{stats['ADR']:.0f}",
            "KAST": f"{stats['KAST']:.1f}%",
            "K/D": f"{stats['K']:.1f}/{stats['D']:.1f}"
        })

    table = tabulate(table_data, headers="keys", tablefmt="fancy_grid")

    description = (
        'üë• <b>–°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã BakS eSports</b>\n\n'
        'üìä <b>–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ –≤—Å–µ–º –º–∞—Ç—á–∞–º:</b>\n'
        '‚Ä¢ <b>–†–µ–π—Ç–∏–Ω–≥</b> ‚Äî –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n'
        '‚Ä¢ <b>ADR</b> ‚Äî —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–Ω –∑–∞ —Ä–∞—É–Ω–¥\n'
        '‚Ä¢ <b>KAST</b> ‚Äî % —Ä–∞—É–Ω–¥–æ–≤ —Å –≤–∫–ª–∞–¥–æ–º –≤ –ø–æ–±–µ–¥—É\n'
        '‚Ä¢ <b>K/D</b> ‚Äî —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —É–±–∏–π—Å—Ç–≤ –∫ —Å–º–µ—Ä—Ç—è–º\n\n'
        'üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>'
    )

    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup()
    for nickname, _ in sorted_players:
        keyboard.add(InlineKeyboardButton(text=nickname, callback_data=f"playerstat_{nickname}"))
    keyboard.add(InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="export_table_players"))
    keyboard.add(InlineKeyboardButton(text="üìä –î–∏–∞–≥—Ä–∞–º–º–∞", callback_data="players_chart"))

    await message.answer(f'{description}\n<pre>{table}</pre>', reply_markup=keyboard)


async def cmd_maps(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /maps"""
    maps = get_maps()
    description = (
        'üó∫Ô∏è <b>–ö–∞—Ä—Ç—ã –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ BakS eSports</b>\n\n'
        'üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–∞–º:</b>\n'
        '–í —Ç–∞–±–ª–∏—Ü–µ –ø–æ–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π –Ω–∞ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–µ.\n\n'
        'üéØ <b>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ä—Ç–µ:</b>\n'
        '‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ\n'
        '‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/map [–Ω–∞–∑–≤–∞–Ω–∏–µ]</code>\n'
        '‚Ä¢ –ü—Ä–∏–º–µ—Ä: <code>/map Mirage</code>\n\n'
        'üí° <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –º–∞—Ç—á–µ–π –Ω–∞ –Ω–µ–π.'
    )
    table = tabulate(
        [{"–ö–∞—Ä—Ç–∞": name, "–ú–∞—Ç—á–µ–π": len(maps[name])} for name in maps],
        headers="keys", tablefmt="fancy_grid"
    )
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup()
    for name in maps:
        keyboard.add(InlineKeyboardButton(text=name, callback_data=f"show_map_{name}"))
    keyboard.add(InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="export_table_maps"))
    await message.answer(f'{description}\n<pre>{table}</pre>', reply_markup=keyboard)


async def cmd_tournaments(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tournaments"""
    tournaments = get_tournaments()
    text = (
        'üèÜ <b>–¢—É—Ä–Ω–∏—Ä—ã –∏ –º–∞—Ç—á–∏ BakS eSports</b>\n\n'
        'üìä <b>–ò—Å—Ç–æ—Ä–∏—è –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π –∫–æ–º–∞–Ω–¥—ã:</b>\n'
        '–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã –∏ –º–∞—Ç—á–∏ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π.\n\n'
    )
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup()
    match_idx = 1
    for t, games in tournaments.items():
        text += f"üèÖ <b>{t}</b> (<code>{len(games)} –º–∞—Ç—á–µ–π</code>):\n"
        for match in games:
            opp = [team for team in match['teams'] if team != 'BAKS'][0]
            text += f"   ‚Ä¢ <b>{match['date']}</b> vs <b>{opp}</b> ‚Äî <code>{match['score']}</code>\n"
            keyboard.add(
                InlineKeyboardButton(
                    text=f"{match['date']} vs {opp}",
                    callback_data=f"match_{match_idx}"
                )
            )
            match_idx += 1
        text += "\n"
    # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤
    keyboard.add(InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="export_table_tournaments"))
    text += 'üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:</b>'
    await message.answer(text, reply_markup=keyboard)


async def cmd_progress(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /progress"""
    players = get_players()
    progress = []
    for player in players:
        stats = get_player_stats(player)
        if len(stats) >= 2:
            first = stats[0]['Rating']
            last = stats[-1]['Rating']
            arrow = 'üìà' if last > first else ('üìâ' if last < first else '‚û°Ô∏è')
            progress.append((player, first, last, arrow))
    description = (
        'üìà <b>–î–∏–Ω–∞–º–∏–∫–∞ —Ä–∞–∑–≤–∏—Ç–∏—è –∏–≥—Ä–æ–∫–æ–≤ BakS eSports</b>\n\n'
        'üìä <b>–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:</b>\n'
        '–ü–æ–∫–∞–∑–∞–Ω —Ä–µ–π—Ç–∏–Ω–≥ –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –ø–µ—Ä–≤–æ–º –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–º –º–∞—Ç—á–µ.\n\n'
        'üìà <b>–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>\n'
        '‚Ä¢ üìà ‚Äî —Ä–µ–π—Ç–∏–Ω–≥ –≤—ã—Ä–æ—Å (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞)\n'
        '‚Ä¢ üìâ ‚Äî —Ä–µ–π—Ç–∏–Ω–≥ —Å–Ω–∏–∑–∏–ª—Å—è (—Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è)\n'
        '‚Ä¢ ‚û°Ô∏è ‚Äî —Ä–µ–π—Ç–∏–Ω–≥ —Å—Ç–∞–±–∏–ª–µ–Ω (—Ö–æ—Ä–æ—à–∞—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å)\n\n'
        'üí° <b>–†–µ–π—Ç–∏–Ω–≥</b> ‚Äî –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞ –∑–∞ –º–∞—Ç—á.\n\n'
        'üéØ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:</b>'
    )
    lines = [f"üë§ <b>{p}</b>: <code>{f:.2f}</code> ‚Üí <code>{l:.2f}</code> {a}" for p, f, l, a in progress]
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="üìä –î–∏–∞–≥—Ä–∞–º–º–∞", callback_data="progress_chart"))
    await message.answer(f'{description}\n' + '\n'.join(lines), parse_mode='HTML', reply_markup=keyboard)


async def cmd_player(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /player"""
    args = message.text.split()
    if len(args) == 2:
        name = args[1]
        stats = get_player_stats(name)
        text, keyboard = render_player_card(name, stats, with_keyboard=True)
        await message.answer(text, reply_markup=keyboard, parse_mode='HTML')
    else:
        await message.answer(
            '‚ùì <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É:</b>\n\n'
            'üìù <code>/player [–Ω–∏–∫ –∏–≥—Ä–æ–∫–∞]</code>\n\n'
            'üéØ <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n'
            '‚Ä¢ <code>/player swetsi</code>\n'
            '‚Ä¢ <code>/player player123</code>\n\n'
            'üí° <b>–°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üë• –ò–≥—Ä–æ–∫–∏" –≤ –º–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã.'
        )


async def cmd_map(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /map"""
    args = message.text.split() if message.text else []
    if len(args) == 2:
        name = args[1]
        stats = get_map_stats(name)
        if stats:
            table = tabulate(
                [{
                    "–î–∞—Ç–∞": m.get("date", "-"),
                    "–°–æ–ø–µ—Ä–Ω–∏–∫": m.get("opponent", "-"),
                    "–°—á—ë—Ç": m.get("score", "-"),
                    "WinRate": "-"
                } for m in stats],
                headers="keys", tablefmt="fancy_grid"
            )
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data=f"export_table_map_{name}"))
            await message.answer(
                f'üó∫Ô∏è <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ: {name.capitalize()}</b>\n\n'
                f'üìä <b>–í—Å–µ –º–∞—Ç—á–∏ BakS eSports –Ω–∞ {name}:</b>\n'
                f'<pre>{table}</pre>\n\n'
                f'üí° <b>–°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üó∫Ô∏è –ö–∞—Ä—Ç—ã" –≤ –º–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–∞—Ä—Ç.',
                reply_markup=keyboard
            )
        else:
            await message.answer(
                '‚ùå <b>–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>\n\n'
                'üîç <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n'
                '‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã\n'
                '‚Ä¢ –ö–∞—Ä—Ç–∞ –Ω–µ –∏–≥—Ä–∞–ª–∞—Å—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–∞—Ö\n\n'
                'üí° <b>–†–µ—à–µ–Ω–∏–µ:</b>\n'
                '‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n'
                '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üó∫Ô∏è –ö–∞—Ä—Ç—ã" –≤ –º–µ–Ω—é\n'
                '‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö'
            )
    else:
        await message.answer(
            '‚ùì <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É:</b>\n\n'
            'üìù <code>/map [–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã]</code>\n\n'
            'üéØ <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n'
            '‚Ä¢ <code>/map Mirage</code>\n'
            '‚Ä¢ <code>/map Inferno</code>\n'
            '‚Ä¢ <code>/map Dust2</code>\n\n'
            'üí° <b>–°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üó∫Ô∏è –ö–∞—Ä—Ç—ã" –≤ –º–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–∞—Ä—Ç.'
        )


async def cmd_graph(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /graph"""
    args = message.text.split()
    if len(args) == 3:
        name, metric = args[1], args[2]
        stats = get_player_stats(name)
        if not stats:
            await message.answer('–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            return
        x = [s['date'] for s in stats]

        def parse_metric(val):
            if isinstance(val, str) and val.endswith('%'):
                return float(val.replace('%', ''))
            try:
                return float(val)
            except Exception:
                return 0

        y = [parse_metric(s[metric]) if metric in s else 0 for s in stats]
        plt.figure(figsize=(7, 4))
        plt.plot(x, y, marker='o')
        plt.title(f'{name} ‚Äî {metric} –ø–æ –º–∞—Ç—á–∞–º')
        plt.xlabel('–î–∞—Ç–∞')
        plt.ylabel(metric)
        plt.grid(True)
        buf = io.BytesIO()
        plt.tight_layout()
        plt.savefig(buf, format='png')
        buf.seek(0)
        await message.answer_photo(buf, caption=f'{name} ‚Äî {metric} –ø–æ –º–∞—Ç—á–∞–º')
        plt.close()
    else:
        await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /graph [–Ω–∏–∫] [–º–µ—Ç—Ä–∏–∫–∞]')


async def cmd_alert(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /alert"""
    await message.answer(
        'üîî <b>–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n'
        'üì± <b>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>\n\n'
        'üöÄ <b>–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n'
        '‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –º–∞—Ç—á–∞—Ö\n'
        '‚Ä¢ –ê–ª–µ—Ä—Ç—ã –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ä–µ–∫–æ—Ä–¥–æ–≤\n'
        '‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–∞—Ö\n'
        '‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤\n\n'
        '‚è∞ <b>–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!</b>'
    )


async def cmd_history(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history"""
    import json
    from export_utils import HISTORY_PATH
    user_id = message.from_user.id
    try:
        with open(HISTORY_PATH, encoding='utf-8') as f:
            history = json.load(f)
    except Exception:
        await message.answer('–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.')
        return
    user_history = [h for h in history if h.get('user_id') == user_id]
    if not user_history:
        await message.answer('–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.')
        return
    last = user_history[-10:][::-1]
    action_map = {
        'view_player_card': ('üë§', '–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–≥—Ä–æ–∫–∞'),
        'view_map': ('üó∫Ô∏è', '–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ä—Ç—ã'),
        'view_match': ('üèÜ', '–ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ç—á–∞'),
        'export': ('üì§', '–≠–∫—Å–ø–æ—Ä—Ç'),
        'view_tournament': ('üèÜ', '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—É—Ä–Ω–∏—Ä–∞'),
        'view_progress': ('üìà', '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞'),
        'view_players_chart': ('üìä', '–î–∏–∞–≥—Ä–∞–º–º–∞ –∏–≥—Ä–æ–∫–æ–≤'),
        'view_abbr': ('‚ÑπÔ∏è', '–°–ø—Ä–∞–≤–∫–∞'),
    }
    lines = ["üïì <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>"]
    for h in last:
        ts = h.get('timestamp', '-')
        action = h.get('action', '-')
        emoji, label = action_map.get(action, ('‚ùî', action))
        params = h.get('params', {})
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if action == 'view_player_card':
            param_str = f"<b>{params.get('player','-')}</b>"
        elif action == 'view_map':
            param_str = f"<b>{params.get('map','-')}</b>"
        elif action == 'view_match':
            param_str = f"–º–∞—Ç—á #{params.get('match_idx','-')}"
        elif action == 'export':
            param_str = f"<i>{params.get('type','-')}</i> ‚Üí <code>{params.get('filename','')}</code> ({params.get('format','')})"
        elif action == 'view_tournament':
            param_str = f"<b>{params.get('tournament','-')}</b>"
        elif action == 'view_progress':
            param_str = f"<b>{params.get('player','-')}</b>"
        elif action == 'view_players_chart':
            param_str = f"<b>{params.get('metric','-')}</b>"
        elif action == 'view_abbr':
            param_str = ''
        else:
            param_str = str(params)
        lines.append(f"<b>{ts}</b> ‚Äî {emoji} <b>{label}</b> {param_str}")
    text = '\n'.join(lines)
    await message.answer(text)


async def unknown(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    await message.answer(
        '‚ùì <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b>\n\n'
        'üîç <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>\n'
        '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n'
        '‚Ä¢ –ù–∞–∂–º–∏—Ç–µ <b>‚ùì –ü–æ–º–æ—â—å</b> –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥\n'
        '‚Ä¢ –ò–ª–∏ –∫–æ–º–∞–Ω–¥—É <code>/help</code>\n\n'
        'üí° <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n'
        '‚Ä¢ <code>/start</code> ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n'
        '‚Ä¢ <code>/players</code> ‚Äî —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤\n'
        '‚Ä¢ <code>/tournaments</code> ‚Äî —Ç—É—Ä–Ω–∏—Ä—ã\n'
        '‚Ä¢ <code>/maps</code> ‚Äî –∫–∞—Ä—Ç—ã\n\n'
        'üéØ <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b> –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚ùì –ü–æ–º–æ—â—å" –≤ –º–µ–Ω—é!'
    ) 